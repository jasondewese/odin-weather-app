(()=>{"use strict";var e={917:(e,n,t)=>{t.d(n,{Z:()=>A});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const A=i},426:(e,n,t)=>{t.d(n,{Z:()=>A});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([e.id,"html {\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n    font-size: 16px;\n    color: #0f172a;\n}\n\n.container {\n    display: grid;\n    grid-template-rows: 5rem 3fr 2fr 2fr;\n    height: 100vh;\n    width: 100vw;\n}\n\n/*****Style header******/\nheader {\n    padding: 0 50px 0 50px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #e0f2fe;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.2);\n    z-index:1;\n    font-size: 22px;\n}\n\nheader img {\n    width: 5rem;\n}\n\nheader input {\n    height: 2rem;\n    width: 250px;\n    font-size: 18px;\n    border-radius: 10px;\n}\n\n.current-units {\n    font-weight: 600;\n}\n\nheader form button {\n    border: none;\n    border-radius: 20px;\n    background-color: #f59e0b;\n    color: #0f172a; \n    height: 2.25rem;\n    width: 125px;\n    font-size: 24px;\n    box-shadow: 0px 3px 5px rgba(0,0,0,0.2), 0px -3px 5px rgba(0,0,0,0.2);\n    \n}\n\n.units-wrapper {\n    border: 3px solid #f59e0b;\n    border-radius: 20px;\n   \n    padding: 10px;\n}\n\nheader form button:hover, .units-wrapper:hover {\n    cursor: pointer;\n}\n/*****End style header*****/\n\n/*****style main*****/\nmain {\n    background-color: #f1f5f9;\n    padding: 2rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.current-weather {\n    height: 100%;\n    width: 50%;\n    display: grid;\n    grid-template-rows: 2fr 1fr 2fr 2fr 1fr;\n    align-items: center;\n    justify-items: center;\n    font-size: 1.5rem;\n}\n\n.low-high {\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n}\n\n.current-weather img {\n    width: 5rem;\n}\n\n.city, .temp {\n    font-size: 2.5rem;\n    font-weight: 600;\n}\n\n/*****end style main*****/\n\n/*****style weather details*****/\n.weather-details {\n    padding: 30px 20% 30px 20%;\n    background-color: #e0f2fe;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.2), 0px -5px 10px rgba(0,0,0,0.2);\n    z-index: 1;\n    font-size: 22px;\n}\n\n.weather-details-wrapper {\n    display: flex;\n    align-items: center;\n    justify-items: center;\n    justify-content: space-evenly;\n    background-color: #e0f2fe;\n    height: 100%;\n}\n\n.weather-details-wrapper > div {\n    width: 150px;\n    height: 150px;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    border: 3px solid #f59e0b;\n    border-radius: 20px;\n}\n\n.weather-details img {\n    width: 3rem;\n}\n\n/*****end style weather details*****/\n\n/*****style seven day forecast*****/\n.seven-day {\n    background-color: #f1f5f9;\n    font-size: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n}\n\n.seven-day-wrapper {\n    padding: 2rem;\n    display: grid;\n    gap:10px;\n    grid-template-columns: repeat(8, 1fr);\n    height: 150px;\n\n    width: 80%;\n}\n\n.seven-day img {\n    width: 2.5rem;\n}\n\n\n\n.day-wrapper {\n    height: 100%;\n    width: 150px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n    border-radius: 20px;\n    background-color: #e0f2fe;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.2), 0px -5px 10px rgba(0,0,0,0.2);\n    z-index: 1;\n}\n\n.day-wrapper .day {\n    font-size: 22px;\n}\n/*****end style seven day forecast*****/","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,iCAAiC;IACjC,eAAe;IACf,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,oCAAoC;IACpC,aAAa;IACb,YAAY;AAChB;;AAEA,wBAAwB;AACxB;IACI,sBAAsB;IACtB,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,yBAAyB;IACzB,wCAAwC;IACxC,SAAS;IACT,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,cAAc;IACd,eAAe;IACf,YAAY;IACZ,eAAe;IACf,qEAAqE;;AAEzE;;AAEA;IACI,yBAAyB;IACzB,mBAAmB;;IAEnB,aAAa;AACjB;;AAEA;IACI,eAAe;AACnB;AACA,2BAA2B;;AAE3B,qBAAqB;AACrB;IACI,yBAAyB;IACzB,aAAa;IACb,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,UAAU;IACV,aAAa;IACb,uCAAuC;IACvC,mBAAmB;IACnB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,SAAS;AACb;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA,yBAAyB;;AAEzB,gCAAgC;AAChC;IACI,0BAA0B;IAC1B,yBAAyB;IACzB,uEAAuE;IACvE,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,qBAAqB;IACrB,6BAA6B;IAC7B,yBAAyB;IACzB,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,8BAA8B;IAC9B,yBAAyB;IACzB,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA,oCAAoC;;AAEpC,mCAAmC;AACnC;IACI,yBAAyB;IACzB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,aAAa;IACb,QAAQ;IACR,qCAAqC;IACrC,aAAa;;IAEb,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;;;AAIA;IACI,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,6BAA6B;IAC7B,mBAAmB;IACnB,yBAAyB;IACzB,uEAAuE;IACvE,UAAU;AACd;;AAEA;IACI,eAAe;AACnB;AACA,uCAAuC",sourcesContent:["html {\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n    font-size: 16px;\n    color: #0f172a;\n}\n\n.container {\n    display: grid;\n    grid-template-rows: 5rem 3fr 2fr 2fr;\n    height: 100vh;\n    width: 100vw;\n}\n\n/*****Style header******/\nheader {\n    padding: 0 50px 0 50px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #e0f2fe;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.2);\n    z-index:1;\n    font-size: 22px;\n}\n\nheader img {\n    width: 5rem;\n}\n\nheader input {\n    height: 2rem;\n    width: 250px;\n    font-size: 18px;\n    border-radius: 10px;\n}\n\n.current-units {\n    font-weight: 600;\n}\n\nheader form button {\n    border: none;\n    border-radius: 20px;\n    background-color: #f59e0b;\n    color: #0f172a; \n    height: 2.25rem;\n    width: 125px;\n    font-size: 24px;\n    box-shadow: 0px 3px 5px rgba(0,0,0,0.2), 0px -3px 5px rgba(0,0,0,0.2);\n    \n}\n\n.units-wrapper {\n    border: 3px solid #f59e0b;\n    border-radius: 20px;\n   \n    padding: 10px;\n}\n\nheader form button:hover, .units-wrapper:hover {\n    cursor: pointer;\n}\n/*****End style header*****/\n\n/*****style main*****/\nmain {\n    background-color: #f1f5f9;\n    padding: 2rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.current-weather {\n    height: 100%;\n    width: 50%;\n    display: grid;\n    grid-template-rows: 2fr 1fr 2fr 2fr 1fr;\n    align-items: center;\n    justify-items: center;\n    font-size: 1.5rem;\n}\n\n.low-high {\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n}\n\n.current-weather img {\n    width: 5rem;\n}\n\n.city, .temp {\n    font-size: 2.5rem;\n    font-weight: 600;\n}\n\n/*****end style main*****/\n\n/*****style weather details*****/\n.weather-details {\n    padding: 30px 20% 30px 20%;\n    background-color: #e0f2fe;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.2), 0px -5px 10px rgba(0,0,0,0.2);\n    z-index: 1;\n    font-size: 22px;\n}\n\n.weather-details-wrapper {\n    display: flex;\n    align-items: center;\n    justify-items: center;\n    justify-content: space-evenly;\n    background-color: #e0f2fe;\n    height: 100%;\n}\n\n.weather-details-wrapper > div {\n    width: 150px;\n    height: 150px;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    border: 3px solid #f59e0b;\n    border-radius: 20px;\n}\n\n.weather-details img {\n    width: 3rem;\n}\n\n/*****end style weather details*****/\n\n/*****style seven day forecast*****/\n.seven-day {\n    background-color: #f1f5f9;\n    font-size: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n}\n\n.seven-day-wrapper {\n    padding: 2rem;\n    display: grid;\n    gap:10px;\n    grid-template-columns: repeat(8, 1fr);\n    height: 150px;\n\n    width: 80%;\n}\n\n.seven-day img {\n    width: 2.5rem;\n}\n\n\n\n.day-wrapper {\n    height: 100%;\n    width: 150px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n    border-radius: 20px;\n    background-color: #e0f2fe;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.2), 0px -5px 10px rgba(0,0,0,0.2);\n    z-index: 1;\n}\n\n.day-wrapper .day {\n    font-size: 22px;\n}\n/*****end style seven day forecast*****/"],sourceRoot:""}]);const A=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),n.push(c))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],A=0;A<e.length;A++){var s=e[A],d=r.base?s[0]+r.base:s[0],c=o[d]||0,p="".concat(d," ").concat(c);o[d]=c+1;var l=t(p),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==l)n[l].references++,n[l].updater(u);else{var f=a(u,r);r.byIndex=A,n.splice(A,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var A=t(o[i]);n[A].references--}for(var s=r(e,a),d=0;d<o.length;d++){var c=t(o[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}o=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),o=t(569),i=t.n(o),A=t(565),s=t.n(A),d=t(216),c=t.n(d),p=t(589),l=t.n(p),u=t(917),f={};f.styleTagTransform=l(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=c(),n()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;var m=t(426),C={};C.styleTagTransform=l(),C.setAttributes=s(),C.insert=i().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=c(),n()(m.Z,C),m.Z&&m.Z.locals&&m.Z.locals;const h=async e=>{const n=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&appid=380d5021392cb05faf4ef872ad04e3ef`,{mode:"cors"}),t=await n.json(),r=t.coord.lat,a=t.coord.lon,o=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${r}&lon=${a}&exclude=alerts&appid=380d5021392cb05faf4ef872ad04e3ef&units=imperial`,{mode:"cors"}),i=await o.json();return i.name=t.name,i},y=(()=>{let e=[];return{getWeather:async n=>{e.splice(0,e.length);const t=await h(n);return((e,n)=>{let t=new Date(1e3*e.current.dt);const r={name:e.name,main:e.current.weather[0].main,day:t.getUTCDay(),description:e.current.weather[0].description,temp:e.current.temp,pressure:e.current.pressure,feelsLike:e.current.feels_like,humidity:e.current.humidity,rain:e.daily[0].pop,tempMax:e.daily[0].temp.max,tempMin:e.daily[0].temp.min,windSpeed:e.current.wind_speed,windDirection:e.current.wind_deg};n.push(r)})(t,e),((e,n)=>{for(let t=1;t<=7;t++){let r=new Date(1e3*e.daily[t].dt),a={dt:e.daily[t].dt,day:r.getDay(),tempMax:e.daily[t].temp.max,tempMin:e.daily[t].temp.min,rain:e.daily[t].pop,main:e.daily[t].weather[0].main,description:e.daily[t].weather[0].description};n.push(a)}})(t,e),console.log(e),e}}})(),g=(()=>{const e=e=>{let n;return n="Clouds"===e?"./../src/images/weather-cloudy.svg":"Clear"===e?"./../src/images/weather-sunny.svg":"Fog"===e?"./../src/images/weather-fog.svg":"Snow"===e?"./../src/images/weather-snowy.svg":"Rain"===e?"./../src/images/weather-pouring.svg":"Drizzle"===e?"./../src/images/weather-rainy.svg":"Thunderstorm"===e?"./../src/images/weather-lightning-rainy.svg":"./../src/images/weather-partly-cloudy.svg",n},n=e=>{let n="Sun";return"0"===e?n="Sun":"1"===e?n="Mon":"2"===e?n="Tue":"3"===e?n="Wed":"4"===e?n="Thur":"5"===e?n="Fri":"6"===e&&(n="Sat"),n};return{updateWeather:async t=>{const r=await y.getWeather(t);document.querySelector("#city").textContent=r[0].name,document.querySelector("#current-weather-summary").textContent=r[0].main,document.querySelector("#current-weather-icon").src=e(r[0].main),document.querySelector("#current-temp").textContent=r[0].temp,document.querySelector("#current-low").textContent=r[0].tempMin,document.querySelector("#current-high").textContent=r[0].tempMax,document.querySelector("#current-feels-like").textContent=r[0].feelsLike,document.querySelector("#current-humidity").textContent=r[0].humidity,document.querySelector("#current-rain-chance").textContent=r[0].rain,document.querySelector("#current-wind").textContent=r[0].windSpeed;for(let t=1;t<8;t++)document.querySelector("#day"+t).textContent=n(r[t].day),document.querySelector("#daily-weather-icon"+t).src=e(r[t].main),document.querySelector("#high-temp"+t).textContent=r[t].tempMax,document.querySelector("#low-temp"+t).textContent=r[t].tempMin}}})();(async()=>{const e=document.querySelector("#search-button"),n=document.querySelector("#location-search");e.addEventListener("click",(function(){/^[a-zA-z]+$/.test(n.value)||/^[a-zA-z]+,[a-zA-z]{2}$/.test(n.value)||/^[a-zA-z]+,[a-zA-z]+,[a-zA-z]{2}$/.test(n.value)?(g.updateWeather(n.value),n.setCustomValidity(""),n.reportValidity()):(n.setCustomValidity("Please enter as {City}, {City,Country}, or {City,State,Country}"),n.reportValidity())})),g.updateWeather("dallas,tx,us")})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,